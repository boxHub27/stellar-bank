// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String @db.ObjectId

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text//
  access_token      String? // @db.Text//
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text//
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  number        String?
  Address       String?
  password      String?
  pin           Int           @default(1234)
  role          Role          @default(USER)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  bankAccount   BankAccount[]
  transaction   Transaction[]
  messages      Messages[]
  alerts        Alerts[]
}

model Transaction {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverName          String
  receiverBank          String
  receiverAccountNumber String
  receiverRoutingNumber String
  amount                String
  description           String
  transactionDate       DateTime
  transactionStatus        String
  transactionAccount    BankAccount @relation(fields: [transactionAccountId], references: [id])
  transactionAccountId  String    @db.ObjectId
  transactionType       String @default("credit") 
  createdBy             User     @relation(fields: [createdById], references: [id])
  createdById           String   @db.ObjectId
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
model BankAccount {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  accountName           String    
  accountBalance        Float      @default(0.00)
  accountNumber         Int
  routingNumber         Int
  transactions          Transaction[]
  createdBy             User     @relation(fields: [createdById], references: [id])
  createdById           String   @db.ObjectId 
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([accountName, createdById])
}

model Messages {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  message     String
  type        String   @default("info")
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Alerts {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  message     String
  type        String   @default("info")
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  PROFILEMANAGER
}


model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
